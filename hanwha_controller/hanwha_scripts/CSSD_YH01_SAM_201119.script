
/* -----------------------------------------

* RodiX Section

----------------------------------------- */

/* Rodi X Variables */

/* -----------------------------------------

* Setting Section

----------------------------------------- */

/* io setting */
/* Coordinate setting */
var base = { "x": 0, "y": 0, "z": 0, "rx": 0, "ry": 0, "rz": 0 };
var tcp = { "x": 0, "y": 0, "z": 0, "rx": 0, "ry": 0, "rz": 0 };
var RodiPoint1 = { "x": -146.79, "y": -1091.14, "z": 201.23, "rx": 90, "ry": 0, "rz": 0 };
var Pos1 = { "x": -146.79, "y": -1091.14, "z": 201.23, "rx": 90, "ry": 0, "rz": 0 };
var RodiPoint2 = { "x": 357.68, "y": -1091, "z": -179.97, "rx": 90, "ry": 0, "rz": 0 };
var Pos2 = { "x": 357.68, "y": -1091, "z": -179.97, "rx": 90, "ry": 0, "rz": 0 };
var RodiPoint3 = { "x": 0.98, "y": -813.67, "z": 471.6, "rx": 90, "ry": 0, "rz": 0 };
var Home = { "x": 0.98, "y": -813.67, "z": 471.6, "rx": 90, "ry": 0, "rz": 0 };
var RodiPoint4 = { "x": 375.09, "y": 451.27, "z": -132, "rx": 90, "ry": 0, "rz": 90 };
var Mir1 = { "x": 375.09, "y": 451.27, "z": -132, "rx": 90, "ry": 0, "rz": 90 };
/* Default TCP Setting */
setToolCenterPoint({ "x": 0, "y": -44.5, "z": 272, "rx": 0, "ry": 0, "rz": 0 });
setPayload(1.5, { "x": 0, "y": -43.41, "z": 70 });

/* -----------------------------------------

* Thread Section

----------------------------------------- */


/* -----------------------------------------

* Main Program Section

----------------------------------------- */

$([0]);
var initLoop = true;
do {
  /* _CMD[Initialize] _KEY[4e107fd5-f] */
  $([0, 0]);

  /* _CMD[SCRIPT996716] _KEY[ac344b21-d] */
  $([0, 1]);
  (function SCRIPT996716() {

    /* -----------------------------------------
    
    * RodiX Section
    
    ----------------------------------------- */

    /* Rodi X Variables */

    /* -----------------------------------------
    
    * Setting Section
    
    ----------------------------------------- */

    /* Global Variables */
    var SERVER_INFO =
    {
      NAME: 'server',
      //IP: '169.254.196.1',
      //PORT: 8080
      IP: '172.16.17.1',
      //IP: '172.16.17.2',
      PORT: 50000
    };


    /* io setting */
    __GLOBAL__.p1 = 0;
    __GLOBAL__.p2 = 0;
    /* Coordinate setting */
    var base = { "x": 0, "y": 0, "z": 0, "rx": 0, "ry": 0, "rz": 0 };
    var tcp = { "x": 0, "y": 0, "z": 0, "rx": 0, "ry": 0, "rz": 0 };
    var RodiPoint1 = { "x": -146.79, "y": -1091.14, "z": 201.23, "rx": 90, "ry": 0, "rz": 0 };
    var Pos1 = { "x": -146.79, "y": -1091.14, "z": 201.23, "rx": 90, "ry": 0, "rz": 0 };
    var RodiPoint2 = { "x": 357.68, "y": -1091, "z": -179.97, "rx": 90, "ry": 0, "rz": 0 };
    var Pos2 = { "x": 357.68, "y": -1091, "z": -179.97, "rx": 90, "ry": 0, "rz": 0 };
    var RodiPoint3 = { "x": 0.98, "y": -813.67, "z": 471.6, "rx": 90, "ry": 0, "rz": 0 };
    var Home = { "x": 0.98, "y": -813.67, "z": 471.6, "rx": 90, "ry": 0, "rz": 0 };
    var RodiPoint4 = { "x": 375.09, "y": 451.27, "z": -132, "rx": 90, "ry": 0, "rz": 90 };
    var Mir1 = { "x": 375.09, "y": 451.27, "z": -132, "rx": 90, "ry": 0, "rz": 90 };
    var Pos1a = createPose(Pos1.x, Pos1.y + 50, Pos1.z + 170, Pos1.rx, Pos1.ry, Pos1.rz);
    var Pos2a = createPose(Pos2.x, Pos2.y + 50, Pos2.z + 170, Pos2.rx, Pos2.ry, Pos2.rz);


    var initRepeatFlag = true;
    var buffer = "";
    var item = "";

    function beforeStart() {
      initRepeatFlag = false;
      /* _CMD[SET321868] _KEY[ae958d77-7] */
      ([0, 0, 0]);
      setToolCenterPoint({ "x": 0, "y": -44.5, "z": 272, "rx": 0, "ry": 0, "rz": 0 });
      setPayload(1.5, { "x": 0, "y": -43.41, "z": 70 });

      /* _CMD[SCRIPT138717] _KEY[42e90404-1] */
      // $([0, 0, 1]);
      (function SCRIPT138717() {
        moveJoint(convertPoseToJoint('tcp', Home), 50, 100);
      })();
      /* $(BEFORE_END) */

      /* Socket Init Functions */
      socketCreate(SERVER_INFO.NAME, SERVER_INFO.IP, SERVER_INFO.PORT);

      // register connect callback
      socketAddListener(SERVER_INFO.NAME, "connection", function () {
        message("Connected");
        //moveLinear('tcp', Home);
      });

      // register close callback
      socketAddListener(SERVER_INFO.NAME, "close", function () {
        message("Connection Closed");
      });

      socketOpen(SERVER_INFO.NAME);
      socketWaitConnection(SERVER_INFO.NAME, 5000);

    }

    /* Default TCP Setting */
    setToolCenterPoint({ "x": 0, "y": -44.5, "z": 272, "rx": 0, "ry": 0, "rz": 0 });
    setPayload(1.5, { "x": 0, "y": -43.41, "z": 70 });

    /* -----------------------------------------
    * Thread Section
    ----------------------------------------- */
    /* -----------------------------------------
    * Main Program Section
    ----------------------------------------- */
    ////Global Functions

    function poses_Same(a, b) {
      var round_current = createPose(Math.round(a.x), Math.round(a.y), Math.round(a.z), Math.round(a.rx), Math.round(a.ry), Math.round(a.rz));
      var round_target = createPose(Math.round(b.x), Math.round(b.y), Math.round(b.z), Math.round(b.rx), Math.round(b.ry), Math.round(b.rz));
      return JSON.stringify(round_current) === JSON.stringify(round_target);
    }

    function socket_Feedback(a) {
      var buffer = "";//Clear buffer
      buffer += a + "\n";
      socketSendString(SERVER_INFO.NAME, buffer);//Send Response		
    }

    function socket_Listen() {
      //message("socket_Listen() ");
      var buffer = socketReadAsciiFloat(SERVER_INFO.NAME);
      message("socket_Listen:" + buffer);

      switch (buffer[0]) {
        case 1:
          message(" executePlacePose command received");
          var offsets = { x: 0, y: 0, z: 0, rx: 0, ry: 0, rz: 0, };
          //var target_POSE=createPose(buffer[1]+offset.x, buffer[2]+offset.y, buffer[3]+offset.z, buffer[4]+offset.rx,buffer[5]+offset.ry, buffer[6]+offset.rz);
          var target_POSE = createPose(buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6]);
          message(target_POSE);
          moveLinear('tcp', target_POSE, buffer[buffer.length - 3], buffer[buffer.length - 2], buffer[buffer.length - 1]);
          waitForMoveEnd();

          if (poses_Same(getCurrentPose('tcp'), target_POSE)) {
            message("executePlacePose success");
          }

          else {
            message("executePlacePose failed");
          }

          break;

        case 2:
          message("moveL command received");
          var offsets = { x: 0, y: 0, z: 0, rx: 0, ry: 0, rz: 0, };
          //var target_POSE=createPose(buffer[1]+offset.x, buffer[2]+offset.y, buffer[3]+offset.z, buffer[4]+offset.rx,buffer[5]+offset.ry, buffer[6]+offset.rz);
          var target_POSE = createPose(buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6]);
          //message(target_POSE);

          moveLinear('tcp', target_POSE, buffer[buffer.length - 3], buffer[buffer.length - 2], buffer[buffer.length - 1]);

          waitForMoveEnd();

          if (poses_Same(getCurrentPose('tcp'), target_POSE)) {
            message("executePlacePose success");
          }

          else {
            message("executePlacePose failed");
          }

          break;

        case 3:
          message("moveJ command received");
          socketFlush(SERVER_INFO.NAME);
          message("moveJoint");
          var joints = buffer.slice(1, 7);
          var m_v = buffer[buffer.length - 3];
          var m_a = buffer[buffer.length - 2];
          var opt = buffer[buffer.length - 1];
          moveJoint(joints, m_v, m_a, opt);
          waitForMoveEnd();
          socket_Feedback(1);
          break;

        case 4:
          item = buffer[1];
          message("executePickItem command received.");
          break;

        case 5:
          message("push_tf_update command received");
          message("push_tf_update");
          buffer = "";
          //Push tf update
          var tf = getCurrentPose('tcp').x + "," + getCurrentPose('tcp').y + "," + getCurrentPose('tcp').z + "," + getCurrentPose('tcp').rx + "," + getCurrentPose('tcp').ry + "," + getCurrentPose('tcp').rz + "\n";
          //message(tf);
          socketSendString(SERVER_INFO.NAME, tf);
          break;
      }

    }


    function relMoveRack(strIdx) {
      /* _CMD[MESSAGE680110] _KEY[3a80265e-4] */
      (strIdx.concat([0]));
      console.log('Start Pick1 subprogram');
      /* _CMD[MOVE775014] _KEY[135943f5-5] */
      (strIdx.concat([1]));
      moveLinear('tcp', poseAdd(getTargetPose('tcp'), poseSub({ "x": -146.7921480071767, "y": -1041.0994288375189, "z": 371.22801267406584, "rx": 90.00023028431539, "ry": -0.0002578267864100509, "rz": -0.00024837647804531473 }, { "x": -146.79435284804376, "y": -1041.098448195563, "z": 280.2958395727233, "rx": 90.00044244796563, "ry": -0.0002017101535694663, "rz": -0.0003465474487523579 })), 500, 1000, { "sync": 1 });
      /* _CMD[MOVE511605] _KEY[4b7e7efc-d] */
      (strIdx.concat([2]));
      moveLinear('tcp', poseAdd(getTargetPose('tcp'), poseSub({ "x": -146.79435284804376, "y": -1041.098448195563, "z": 280.2958395727233, "rx": 90.00044244796563, "ry": -0.0002017101535694663, "rz": -0.0003465474487523579 }, { "x": -146.79539339214358, "y": -1367.2051548653108, "z": 280.29382792182315, "rx": 90.00056748493053, "ry": -0.00013886978750801072, "rz": -0.00034617986973338737 })), 250, 100, { "sync": 1 });
      /* _CMD[MOVE694068] _KEY[5fad6d4c-d] */
      (strIdx.concat([3]));
      moveLinear('tcp', poseAdd(getTargetPose('tcp'), poseSub({ "x": -146.79539339214358, "y": -1367.2051548653108, "z": 280.29382792182315, "rx": 90.00056748493053, "ry": -0.00013886978750801072, "rz": -0.00034617986973338737 }, { "x": -146.7951268467015, "y": -1367.2050119940372, "z": 365.89191767556645, "rx": 90.00063709512347, "ry": -0.00011088780508763089, "rz": -0.0003145746350500679 })), 150, 100, { "sync": 0 });
      /* _CMD[SET654574] _KEY[bf0e49dd-2] */
      (strIdx.concat([4]));
      var __r__ti = getToolCenterPoint();
      setPayload(2, { x: __r__ti.x, y: __r__ti.y, z: __r__ti.z });

      /* _CMD[MOVE862417] _KEY[0950d839-a] */
      (strIdx.concat([5]));
      moveLinear('tcp', poseAdd(getTargetPose('tcp'), poseSub({ "x": -146.7951268467015, "y": -1367.2050119940372, "z": 365.89191767556645, "rx": 90.00063709512347, "ry": -0.00011088780508763089, "rz": -0.0003145746350500679 }, { "x": -146.79554379970176, "y": -958.0568634348901, "z": 365.89000866322107, "rx": 90.00078353587453, "ry": -0.0001063903467449021, "rz": -0.00033359269037453316 })), 500, 1000, { "sync": 1 });
      /* _CMD[MOVE648865] _KEY[f83f8cd0-6] */
      (strIdx.concat([6]));
      moveJoint(convertPoseToJoint('tcp', { "x": 957.1049069139387, "y": -152.87723718903607, "z": 201.63930288151414, "rx": 90.00112054685302, "ry": -0.00006685942015226619, "rz": 89.99996009005508 }, [-18.32405, -28.3884056, -61.9996231, -18.3244491, 90.3673093, -90.1219294]), 50, 100, { "sync": 0 });

    }
    function relMoveMir(strIdx) {
      /* _CMD[MOVE487820] _KEY[c492d586-d] */
      (strIdx.concat([0]));
      moveJoint(convertPoseToJoint('tcp', { "x": 969.5620048650037, "y": -41.224951173256215, "z": 264.9200080005778, "rx": 90.00054756814056, "ry": 0.0001934166962011471, "rz": 89.99997267342056 }, [-4.9699099, -18.2995474, -63.5767773, -5.020037, 81.9065551, -89.2916926]), 50, 100, { "sync": 1 });
      /* _CMD[MOVE65959] _KEY[09e75243-6] */
      (strIdx.concat([1]));
      moveJoint(convertPoseToJoint('tcp', { "x": 327.8822996332393, "y": 557.1421351430432, "z": -17.87594580165017, "rx": 90.00059718043752, "ry": -0.00003439495403589546, "rz": 89.99995351918207 }, [106.7440468, -58.1940115, -44.5627239, 106.35296, 86.3520941, -77.76738]), 50, 100, { "sync": 0 });

    }

    function Mir2Home(strIdx) {
      /* _CMD[MOVE65959] _KEY[003eac94-7] */
      (strIdx.concat([0]));
      moveJoint(convertPoseToJoint('tcp', { "x": 327.8822996332393, "y": 557.1421351430432, "z": -17.87594580165017, "rx": 90.00059718043752, "ry": -0.00003439495403589546, "rz": 89.99995351918207 }, [106.7440468, -58.1940115, -44.5627239, 106.35296, 86.3520941, -77.76738]), 50, 100, { "sync": 1 });
      /* _CMD[MOVE487820] _KEY[1fe59c22-2] */
      (strIdx.concat([1]));
      moveJoint(convertPoseToJoint('tcp', { "x": 969.5620048650037, "y": -41.224951173256215, "z": 264.9200080005778, "rx": 90.00054756814056, "ry": 0.0001934166962011471, "rz": 89.99997267342056 }, [-4.9699099, -18.2995474, -63.5767773, -5.020037, 81.9065551, -89.2916926]), 50, 100, { "sync": 1 });
      /* _CMD[MOVE567736] _KEY[c410ff6d-d] */
      (strIdx.concat([2]));
      moveJoint(convertPoseToJoint('tcp', { "x": 0.9798283884765878, "y": -813.669777836086, "z": 471.5992158987178, "rx": 90.00004988622966, "ry": 0.00004416490795429688, "rz": 0.000001523803377147633 }, [-89.823523, 28.9367562, -71.1131129, 0.2628424, 42.1766566, -90.1947874]), 50, 100, { "sync": 0 });

    }

    ////Main Functions


    ([0]);
    var initLoop = true;
    do {
      /* _CMD[Initialize] _KEY[a08d1478-3] */
      ([0, 0]);
      if (initRepeatFlag) beforeStart();
      /* _CMD[Main] _KEY[00796f34-f] */
      ([0, 1]);
      (function Main() {

        do {
          //Listen for executePickItem command from ROS server
          socket_Listen();

          //recognize First Item to pick

          if (item > 0) {
            //Move to Rack 
            relMoveRack([0, 3]);
            //Pick Item 1 or 2

            switch (item) {
              case 1:
                message("Pick Item" + item);
                //moveLinear('tcp', Pos1a, 500, 1000);
                break;

              case 2:
                message("Pick Item" + item);
                //moveLinear('tcp', Pos2a, 500, 1000);
                break;
            }
            //Move to Mir
            waitForMoveEnd();
            relMoveMir([0, 4]);

            //Feedback to ROS Server that picking is done
            waitForMoveEnd();
            socket_Feedback(1);
            //sleep(5);

            //Listen to executePlacePose command from ROS server
            //Move to Mir and Place
            socket_Listen();

            // Return to home
            Mir2Home([0, 5]);

            //Feedback to ROS server that placing is done
            waitForMoveEnd();
            socket_Feedback(1);
          }
          //Clear item string
          item = "";

        } while (1);// For testing

        /*
        do {
            //socket_ReadandRespond updates item array
            socket_ReadandRespond();// Listens for Picking commands
            message("Item No.1 = " + item[0]);
            message("Item No.2 = " + item[1]);
            message("Item 1 is NAN = " + isNaN(item[0]));
            message("Item 2 is NAN = " + isNaN(item[1]));
        } while (isNaN(item[0]) && isNaN(item[1]));
 
 
        message("Items to pick received");
        message("1st pick = Item " + item[0]);
        message("2nd pick = Item " + item[1]);
        message("Total number of items to pick = " + item.length);
        wait(10000);
 
        var i;
        var Pos1a = createPose(Pos1.x, Pos1.y + 50, Pos1.z + 170, Pos1.rx, Pos1.ry, Pos1.rz);
        var Pos2a = createPose(Pos2.x, Pos2.y + 50, Pos2.z + 170, Pos2.rx, Pos2.ry, Pos2.rz);
 
        var x = Mir1.x.toString();
        var y = Mir1.y.toString();
        var z = Mir1.z.toString();
        var rx = Mir1.rx.toString();
        var ry = Mir1.ry.toString();
        var rz = Mir1.rz.toString();
 
        var posMir = [x, y, z, rx, ry, rz];
        posMir = posMir.join(",");
 
        var posCam;
 
        for (i = 0; i < item.length; i++) {
            if (item[i] == 1) {
                message("Now picking Item " + item[i] + " (" + (i + 1) + " of " + item.length + " )");
                //moveJoint(convertPoseToJoint('tcp', Pos1), 50, 100);
                moveLinear('tcp', Pos1a, 500, 1000);
                message("moveLinear('tcp', Pos1a, 500, 1000);");
                relMoveRack([0, 3]);
                relMoveMir([0, 4]);
                socket_ReadandRespond();
            	
            	
            } else if (item[i] == 2) {
                message("Now picking Item " + item[i] + " (" + (i + 1) + " of " + item.length + " )");
                //		moveJoint(convertPoseToJoint('tcp', Pos2), 50, 100);
                //moveLinear('tcp', Pos2a, 500, 1000);
                message("moveLinear('tcp', Pos2a, 500, 1000);");
                relMoveRack([0, 3]);
                relMoveMir([0, 4]);
            } else {
                message("Item out of range.  Please reselect");
                moveJoint(convertPoseToJoint('tcp', Home), 50, 100);
            }
            //	moveJoint(convertPoseToJoint('tcp', Mir1), 50, 100);
            //	_subprogram_fn_relMoveMir([0,4]);
            console.log("Out of loop liao");
            //	_subprogram_fn_relMoveMir([0,4]);
 
            // socketSendString("soc1", posMir);
            // wait(5000);
            // posCam = socketReadAsciiFloat("soc1", 6);
            // console.log(posCam);
        }
    */

      })();

      /* _CMD[HALT226595] _KEY[c7f2dfaf-b] */
      ([0, 2]);
      halt();
      /* _CMD[SUBPROGRAM107547] _KEY[4c131df8-c] */
      ([0, 3]);
      // Call SubProgram : _subprogram_fn_relMoveRack
      relMoveRack([0, 3]);
      /* _CMD[SUBPROGRAM285477] _KEY[f8ebd031-8] */
      ([0, 4]);
      // Call SubProgram : _subprogram_fn_relMoveMir
      relMoveMir([0, 4]);
      ([0, 5]);
      Mir2Home([0, 5]);
      // $([0,6]);


      if (initLoop) initLoop = false;
      increaseProgramRepeatCount();
    } while (getProgramRepeatFlag());
    sleep(100);


  })();
  /* $(FIN_ROOT) */
  if (initLoop) initLoop = false;
  increaseProgramRepeatCount();
} while (getProgramRepeatFlag());
sleep(100);

